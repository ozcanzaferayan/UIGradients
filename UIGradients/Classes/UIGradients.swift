//
//  Gradients.swift
//  FBSnapshotTestCase
//
//  Created by Ã–zcan Zafer Ayan on 13.07.2018.
//

import Foundation

public enum UIGradients:Int {
    public var name: String {
        return Mirror(reflecting: self).children.first?.label ?? String(describing: self)
    }
    
    public static var count: Int {
        return gradients.count
    }
    
    public func makeGradientLayer(_ angle: Int) ->  CAGradientLayer {
        let gradient:CAGradientLayer = CAGradientLayer()
        let colorHexes = gradients[rawValue]
        let colors = getUIColors(colorHexes)
        let locations = getGradientLocations(colorHexes)
        gradient.colors = colors
        gradient.locations = locations as [NSNumber]
        let startEndPoints = getStartEndPointsFor(angle: angle)
        gradient.startPoint = startEndPoints.0
        gradient.endPoint = startEndPoints.1
        return gradient
    }
    
    func getStartEndPointsFor(angle: Int) -> (CGPoint, CGPoint){
        let rotation = Double(angle % 360) / 360.0
        let a = pow(sin((2*Double.pi*((rotation+0.75)/2))),2)
        let b = pow(sin((2*Double.pi*((rotation+0.0)/2))),2)
        let c = pow(sin((2*Double.pi*((rotation+0.25)/2))),2)
        let d = pow(sin((2*Double.pi*((rotation+0.5)/2))),2)
        return (CGPoint(x: a, y:b), CGPoint(x: c, y:d))
    }
    
    public func gradientLayerFor(view: UIView, angle: Int) -> CAGradientLayer{
        let gradient = makeGradientLayer(0)
        let points = getStartEndPointsFor(angle: angle)
        gradient.frame = view.bounds
        gradient.startPoint = points.0
        gradient.endPoint = points.1
        
        return gradient
    }
    
    
    func getUIColors(_ hexArray: [Int]) -> [CGColor] {
        return hexArray.map { rgb in UIColor(rgb: rgb).cgColor}
    }
    
    func getGradientLocations(_ hexArray: [Int]) -> [Double] {
        let partValue = 1.0/Double(hexArray.count - 1)
        return hexArray.enumerated().map { (arg) -> Double in
            let (index, _) = arg;
            if index == hexArray.count - 1 {
                return 1
            }
            let result = Double(index) * partValue
            let roundedValue = floor(result * 10) / 10
            return roundedValue
        }
    }
    
    
    case grade_grey, piggy_pink, cool_blues, megatron, moonlit_asteroid, jshine, evening_sunshine, dark_ocean, cool_sky, yoda, memariani, amin, harvey, neuromancer, azur_lane, witching_hour, flare, metapolis, kyoo_pal, kye_meh, kyoo_tah, by_design, ultra_voilet, burning_orange, wiretap, summer_dog, rastafari, sin_city_red, citrus_peel, blue_raspberry, margo, magic, evening_night, vanusa, shifty, expresso, slight_ocean_view, pure_lust, moon_purple, red_sunset, shifter, wedding_day_blues, sand_to_blue, quepal, pun_yeta, sublime_light, sublime_vivid, bighead, taran_tado, relaxing_red, lawrencium, ohhappiness, delicate, selenium, sulphur, pink_flavour, rainbow_blue, orange_fun, digital_water, lithium, argon, hydrogen, zinc, velvet_sun, king_yna, summer, orange_coral, purpink, dull, kimoby_is_the_new_blue, broken_hearts, subu, socialive, crimson_tide, telegram, terminal, scooter, alive, relay, meridian, compare_now, mello, crystal_clear, visions_of_grandeur, chitty_chitty_bang_bang, blue_skies, sunkist, coal, html, cinnamint, maldives, mini, sha_la_la, purplepine, celestial, learning_and_leading, pacific_dream, venice, orca, love_and_liberty, very_blue, can_you_feel_the_love_tonight, the_blue_lagoon, under_the_lake, honey_dew, roseanna, what_lies_beyond, rose_colored_lenses, easymed, cocoaa_ice, jodhpur, jaipur, vice_city, mild, dawn, ibiza_sunset, radar, _80s_purple, black_rose, brady_brady_fun_fun, eds_sunset_gradient, snapchat, cosmic_fusion, nepal, azure_pop, love_couple, disco, limeade, dania, _50_shades_of_grey, jupiter, iiit_delhi, sun_on_the_horizon, blood_red, sherbert, firewatch, lush, frost, mauve, royal, minimal_red, dusk, deep_sea_space, grapefruit_sunset, sunset, solid_vault, bright_vault, politics, sweet_morning, sylvia, transfile, tranquil, red_ocean, shahabi, alihossein, ali, purple_white, colors_of_sky, decent, deep_space, dark_skies, suzy, superman, nighthawk, forest, miami_dolphins, minnesota_vikings, christmas, joomla, pizelex, haikus, pale_wood, purplin, inbox, blush, back_to_the_future, poncho, green_and_blue, light_orange, netflix, little_leaf, deep_purple, back_to_earth, master_card, clear_sky, passion, timber, between_night_and_day, sage_persuasion, lizard, piglet, dark_knight, curiosity_blue, ukraine, green_to_dark, fresh_turboscent, koko_caramel, virgin_america, portrait, turquoise_flow, vine, flickr, instagram, atlas, twitch, pastel_orange_at_the_sun, endless_river, predawn, purple_bliss, talking_to_mice_elf, hersheys, crazy_orange_i, between_the_clouds, metallic_toad, martini, friday, servquick, behongo, soundcloud, facebook_messenger, shore, cheer_up_emo_kid, amethyst, man_of_steel, neon_life, teal_love, red_mist, starfall, dance_to_forget, parklife, cherryblossoms, ash, virgin, earthly, dirty_fog, the_strain, reef, candy, autumn, nelson, winter, forever_lost, almost, moor, aqualicious, misty_meadow, kyoto, sirius_tamed, jonquil, petrichor, a_lost_memory, vasily, blurry_beach, namn, day_tripper, pinot_noir, miaka, army, shrimpy, influenza, calm_darya, bourbon, stellar, clouds, moonrise, peach, dracula, mantle, titanium, opa, sea_blizz, midnight_city, mystic, shroom_haze, moss, bora_bora, venice_blue, electric_violet, kashmir, steel_gray, mirage, juicy_orange, mojito, cherry, pinky, sea_weed, stripe, purple_paradise, sunrise, aqua_marine, aubergine, bloody_mary, mango_pulp, frozen, rose_water, horizon, monte_carlo, lemon_twist, emerald_water, intuitive_purple, green_beach, sunny_days, playing_with_reds, harmonic_energy, cool_brown, youtube, noon_to_dusk, hazel, nimvelo, sea_blue, blooker20, sexy_blue, purple_love, dimigo, skyline, sel, sky, petrol, anamnisar, copper, royal_blue_petrol, royal_blue, windy, rea, bupe, mango, reaqua, lunada, bluelagoo, anwar, combi, ver_black, ver, blu
}

private let gradients : [[Int]]  = [[0xbdc3c7, 0x2c3e50], [0xee9ca7, 0xffdde1], [0x2193b0, 0x6dd5ed], [0xc6ffdd, 0xfbd786, 0xf7797d], [0x0f2027, 0x203a43, 0x2c5364], [0x12c2e9, 0xc471ed, 0xf64f59], [0xb92b27, 0x1565c0], [0x373b44, 0x4286f4], [0x2980b9, 0x6dd5fa, 0xffffff], [0xff0099, 0x493240], [0xaa4b6b, 0x6b6b83, 0x3b8d99], [0x8e2de2, 0x4a00e0], [0x1f4037, 0x99f2c8], [0xf953c6, 0xb91d73], [0x7f7fd5, 0x86a8e7, 0x91eae4], [0xc31432, 0x240b36], [0xf12711, 0xf5af19], [0x659999, 0xf4791f], [0xdd3e54, 0x6be585], [0x8360c3, 0x2ebf91], [0x544a7d, 0xffd452], [0x009fff, 0xec2f4b], [0x654ea3, 0xeaafc8], [0xff416c, 0xff4b2b], [0x8a2387, 0xe94057, 0xf27121], [0xa8ff78, 0x78ffd6], [0x1e9600, 0xfff200, 0xff0000], [0xed213a, 0x93291e], [0xfdc830, 0xf37335], [0x00b4db, 0x0083b0], [0xffefba, 0xffffff], [0x59c173, 0xa17fe0, 0x5d26c1], [0x005aa7, 0xfffde4], [0xda4453, 0x89216b], [0x636363, 0xa2ab58], [0xad5389, 0x3c1053], [0xa8c0ff, 0x3f2b96], [0x333333, 0xdd1818], [0x4e54c8, 0x8f94fb], [0x355c7d, 0x6c5b7b, 0xc06c84], [0xbc4e9c, 0xf80759], [0x40e0d0, 0xff8c00, 0xff0080], [0x3e5151, 0xdecba4], [0x11998e, 0x38ef7d], [0x108dc7, 0xef8e38], [0xfc5c7d, 0x6a82fb], [0xfc466b, 0x3f5efb], [0xc94b4b, 0x4b134f], [0x23074d, 0xcc5333], [0xfffbd5, 0xb20a2c], [0x0f0c29, 0x302b63, 0x24243e], [0x00b09b, 0x96c93d], [0xd3cce3, 0xe9e4f0], [0x3c3b3f, 0x605c3c], [0xcac531, 0xf3f9a7], [0x800080, 0xffc0cb], [0x00f260, 0x0575e6], [0xfc4a1a, 0xf7b733], [0x74ebd5, 0xacb6e5], [0x6d6027, 0xd3cbb8], [0x03001e, 0x7303c0, 0xec38bc, 0xfdeff9], [0x667db6, 0x0082c8, 0x0082c8, 0x667db6], [0xada996, 0xf2f2f2, 0xdbdbdb, 0xeaeaea], [0xe1eec3, 0xf05053], [0x1a2a6c, 0xb21f1f, 0xfdbb2d], [0x22c1c3, 0xfdbb2d], [0xff9966, 0xff5e62], [0x7f00ff, 0xe100ff], [0xc9d6ff, 0xe2e2e2], [0x396afc, 0x2948ff], [0xd9a7c7, 0xfffcdc], [0x0cebeb, 0x20e3b2, 0x29ffc6], [0x06beb6, 0x48b1bf], [0x642b73, 0xc6426e], [0x1c92d2, 0xf2fcfe], [0x000000, 0x0f9b0f], [0x36d1dc, 0x5b86e5], [0xcb356b, 0xbd3f32], [0x3a1c71, 0xd76d77, 0xffaf7b], [0x283c86, 0x45a247], [0xef3b36, 0xffffff], [0xc0392b, 0x8e44ad], [0x159957, 0x155799], [0x000046, 0x1cb5e0], [0x007991, 0x78ffd6], [0x56ccf2, 0x2f80ed], [0xf2994a, 0xf2c94c], [0xeb5757, 0x000000], [0xe44d26, 0xf16529], [0x4ac29a, 0xbdfff3], [0xb2fefa, 0x0ed2f7], [0x30e8bf, 0xff8235], [0xd66d75, 0xe29587], [0x20002c, 0xcbb4d4], [0xc33764, 0x1d2671], [0xf7971e, 0xffd200], [0x34e89e, 0x0f3443], [0x6190e8, 0xa7bfe8], [0x44a08d, 0x093637], [0x200122, 0x6f0000], [0x0575e6, 0x021b79], [0x4568dc, 0xb06ab3], [0x43c6ac, 0x191654], [0x093028, 0x237a57], [0x43c6ac, 0xf8ffae], [0xffafbd, 0xffc3a0], [0xf0f2f0, 0x000c40], [0xe8cbc0, 0x636fa4], [0xdce35b, 0x45b649], [0xc0c0aa, 0x1cefff], [0x9cecfb, 0x65c7f7, 0x0052d4], [0xdbe6f6, 0xc5796d], [0x3494e6, 0xec6ead], [0x67b26f, 0x4ca2cd], [0xf3904f, 0x3b4371], [0xee0979, 0xff6a00], [0xa770ef, 0xcf8bf3, 0xfdb99b], [0x41295a, 0x2f0743], [0xf4c4f3, 0xfc67fa], [0x00c3ff, 0xffff1c], [0xff7e5f, 0xfeb47b], [0xfffc00, 0xffffff], [0xff00cc, 0x333399], [0xde6161, 0x2657eb], [0xef32d9, 0x89fffd], [0x3a6186, 0x89253e], [0x4ecdc4, 0x556270], [0xa1ffce, 0xfaffd1], [0xbe93c5, 0x7bc6cc], [0xbdc3c7, 0x2c3e50], [0xffd89b, 0x19547b], [0x808080, 0x3fada8], [0xfceabb, 0xf8b500], [0xf85032, 0xe73827], [0xf79d00, 0x64f38c], [0xcb2d3e, 0xef473a], [0x56ab2f, 0xa8e063], [0x000428, 0x004e92], [0x42275a, 0x734b6d], [0x141e30, 0x243b55], [0xf00000, 0xdc281e], [0x2c3e50, 0xfd746c], [0x2c3e50, 0x4ca1af], [0xe96443, 0x904e95], [0x0b486b, 0xf56217], [0x3a7bd5, 0x3a6073], [0x00d2ff, 0x928dab], [0x2196f3, 0xf44336], [0xff5f6d, 0xffc371], [0xff4b1f, 0xff9068], [0x16bffd, 0xcb3066], [0xeecda3, 0xef629f], [0x1d4350, 0xa43931], [0xa80077, 0x66ff00], [0xf7ff00, 0xdb36a4], [0xff4b1f, 0x1fddff], [0xba5370, 0xf4e2d8], [0xe0eafc, 0xcfdef3], [0x4ca1af, 0xc4e0e5], [0x000000, 0x434343], [0x4b79a1, 0x283e51], [0x834d9b, 0xd04ed6], [0x0099f7, 0xf11712], [0x2980b9, 0x2c3e50], [0x5a3f37, 0x2c7744], [0x4da0b0, 0xd39d38], [0x5614b0, 0xdbd65c], [0x2f7336, 0xaa3a38], [0x1e3c72, 0x2a5298], [0x114357, 0xf29492], [0xfd746c, 0xff9068], [0xeacda3, 0xd6ae7b], [0x6a3093, 0xa044ff], [0x457fca, 0x5691c8], [0xb24592, 0xf15f79], [0xc02425, 0xf0cb35], [0x403a3e, 0xbe5869], [0xc2e59c, 0x64b3f4], [0xffb75e, 0xed8f03], [0x8e0e00, 0x1f1c18], [0x76b852, 0x8dc26f], [0x673ab7, 0x512da8], [0x00c9ff, 0x92fe9d], [0xf46b45, 0xeea849], [0x005c97, 0x363795], [0xe53935, 0xe35d5b], [0xfc00ff, 0x00dbde], [0x2c3e50, 0x3498db], [0xccccb2, 0x757519], [0x304352, 0xd7d2cc], [0xee9ca7, 0xffdde1], [0xba8b02, 0x181818], [0x525252, 0x3d72b4], [0x004ff9, 0xfff94c], [0x6a9113, 0x141517], [0xf1f2b5, 0x135058], [0xd1913c, 0xffd194], [0x7b4397, 0xdc2430], [0x8e9eab, 0xeef2f3], [0x136a8a, 0x267871], [0x00bf8f, 0x001510], [0xff0084, 0x33001b], [0x833ab4, 0xfd1d1d, 0xfcb045], [0xfeac5e, 0xc779d0, 0x4bc0c8], [0x6441a5, 0x2a0845], [0xffb347, 0xffcc33], [0x43cea2, 0x185a9d], [0xffa17f, 0x00223e], [0x360033, 0x0b8793], [0x948e99, 0x2e1437], [0x1e130c, 0x9a8478], [0xd38312, 0xa83279], [0x73c8a9, 0x373b44], [0xabbaab, 0xffffff], [0xfdfc47, 0x24fe41], [0x83a4d4, 0xb6fbff], [0x485563, 0x29323c], [0x52c234, 0x061700], [0xfe8c00, 0xf83600], [0x00c6ff, 0x0072ff], [0x70e1f5, 0xffd194], [0x556270, 0xff6b6b], [0x9d50bb, 0x6e48aa], [0x780206, 0x061161], [0xb3ffab, 0x12fff7], [0xaaffa9, 0x11ffbd], [0x000000, 0xe74c3c], [0xf0c27b, 0x4b1248], [0xff4e50, 0xf9d423], [0xadd100, 0x7b920a], [0xfbd3e9, 0xbb377d], [0x606c88, 0x3f4c6b], [0xc9ffbf, 0xffafbd], [0x649173, 0xdbd5a4], [0xb993d6, 0x8ca6db], [0x870000, 0x190a05], [0x00d2ff, 0x3a7bd5], [0xd3959b, 0xbfe6ba], [0xdad299, 0xb0dab9], [0xf2709c, 0xff9472], [0xe6dada, 0x274046], [0x5d4157, 0xa8caba], [0xddd6f3, 0xfaaca8], [0x616161, 0x9bc5c3], [0x50c9c3, 0x96deda], [0x215f00, 0xe4e4d9], [0xc21500, 0xffc500], [0xefefbb, 0xd4d3dd], [0xffeeee, 0xddefbb], [0x666600, 0x999966], [0xde6262, 0xffb88c], [0xe9d362, 0x333333], [0xd53369, 0xcbad6d], [0xa73737, 0x7a2828], [0xf857a6, 0xff5858], [0x4b6cb7, 0x182848], [0xfc354c, 0x0abfbc], [0x414d0b, 0x727a17], [0xe43a15, 0xe65245], [0xc04848, 0x480048], [0x5f2c82, 0x49a09d], [0xec6f66, 0xf3a183], [0x7474bf, 0x348ac7], [0xece9e6, 0xffffff], [0xdae2f8, 0xd6a4a4], [0xed4264, 0xffedbc], [0xdc2424, 0x4a569d], [0x24c6dc, 0x514a9d], [0x283048, 0x859398], [0x3d7eaa, 0xffe47a], [0x1cd8d2, 0x93edc7], [0x232526, 0x414345], [0x757f9a, 0xd7dde8], [0x5c258d, 0x4389a2], [0x134e5e, 0x71b280], [0x2bc0e4, 0xeaecc6], [0x085078, 0x85d8ce], [0x4776e6, 0x8e54e9], [0x614385, 0x516395], [0x1f1c2c, 0x928dab], [0x16222a, 0x3a6073], [0xff8008, 0xffc837], [0x1d976c, 0x93f9b9], [0xeb3349, 0xf45c43], [0xdd5e89, 0xf7bb97], [0x4cb8c4, 0x3cd3ad], [0x1fa2ff, 0x12d8fa, 0xa6ffcb], [0x1d2b64, 0xf8cdda], [0xff512f, 0xf09819], [0x1a2980, 0x26d0ce], [0xaa076b, 0x61045f], [0xff512f, 0xdd2476], [0xf09819, 0xedde5d], [0x403b4a, 0xe7e9bb], [0xe55d87, 0x5fc3e4], [0x003973, 0xe5e5be], [0xcc95c0, 0xdbd4b4, 0x7aa1d2], [0x3ca55c, 0xb5ac49], [0x348f50, 0x56b4d3], [0xda22ff, 0x9733ee], [0x02aab0, 0x00cdac], [0xede574, 0xe1f5c4], [0xd31027, 0xea384d], [0x16a085, 0xf4d03f], [0x603813, 0xb29f94], [0xe52d27, 0xb31217], [0xff6e7f, 0xbfe9ff], [0x77a1d3, 0x79cbca, 0xe684ae], [0x314755, 0x26a0da], [0x2b5876, 0x4e4376], [0xe65c00, 0xf9d423], [0x2193b0, 0x6dd5ed], [0xcc2b5e, 0x753a88], [0xec008c, 0xfc6767], [0x1488cc, 0x2b32b2], [0x00467f, 0xa5cc82], [0x076585, 0xffffff], [0xbbd2c5, 0x536976], [0x9796f0, 0xfbc7d4], [0xb79891, 0x94716b], [0xbbd2c5, 0x536976, 0x292e49], [0x536976, 0x292e49], [0xacb6e5, 0x86fde8], [0xffe000, 0x799f0c], [0x00416a, 0xe4e5e6], [0xffe259, 0xffa751], [0x799f0c, 0xacbb78], [0x5433ff, 0x20bdff, 0xa5fecb], [0x0052d4, 0x4364f7, 0x6fb1fc], [0x334d50, 0xcbcaa5], [0x00416a, 0x799f0c, 0xffe000], [0xf7f8f8, 0xacbb78], [0xffe000, 0x799f0c], [0x00416a, 0xe4e5e6]]


